@page "/categories"
@inject HttpClient Http

<h1>Categories</h1>

<fieldset>
    <legend>Search</legend>
    <div class="form-horizontal">
        <div class="form-group-sm row">
            <label class="control-label col-sm-3" for="Filter">Filter</label>
            <div class="col-sm-6"><input class="form-control" type="text" id="Filter" name="Filter" value="@Filter" onchange="@(e => Filter_Change(e))" placeholder="Filter Name/Description..." /></div>
            <div class="col-sm-3"><button class="btn btn-primary" onclick="@Reset_Click">Reset</button></div>
        </div>
    </div>
</fieldset>

<Pager CurrentPage="@CurrentPage" PageCount="@GetPageCount()" PageChanged="@(e => { CurrentPage = e; StateHasChanged(); })"></Pager>

<table class="table table-sm table-striped">
    <thead class="thead-light">
        <tr>
            <th scope="col">Actions</th>
            <th scope="col">ID</th>
            <th scope="col">Name</th>
            <th scope="col">Description</th>
            <th scope="col">Picture</th>
        </tr>
    </thead>
    <tbody>
        @if (CategoryData == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            @foreach (var category in GetCategories().Skip((CurrentPage - 1) * PageSize).Take(PageSize))
            {
            <tr>
                <td>
                    @if (Edit != null && category.CategoryID == Edit.CategoryID)
                    {
                    <a href="javascript:;" onclick="@(async e => await Save_Click())">Save</a> <text>|</text>
                    <a href="javascript:;" onclick="@(e => Cancel_Click())">Cancel</a>
                    }
                    else
                    {
                    <a href="javascript:;" onclick="@(e => Edit_Click(category.CategoryID))">Edit</a>
                    }
                </td>
                <td scope="row">@category.CategoryID</td>
                <td>
                    @if (Edit != null && category.CategoryID == Edit.CategoryID)
                    {
                        <input type="text" bind="Edit.CategoryName" />
                    }
                    else
                    {
                        @category.CategoryName
                    }
                </td>
                <td>
                    @if (Edit != null && category.CategoryID == Edit.CategoryID)
                    {
                        <input type="text" bind="Edit.Description" />
                    }
                    else
                    {
                        @category.Description
                    }
                </td>
                <td><img src="@(string.Format("api/Category/Picture/{0}", category.CategoryID))" /></td>
            </tr>
            }
        }
    </tbody>
</table>

<Pager CurrentPage="@CurrentPage" PageCount="@GetPageCount()" PageChanged="@(e => { CurrentPage = e; StateHasChanged(); })"></Pager>

@functions {
    public string Filter { get; set; } = "";
    public int CurrentPage { get; set; } = 1;
    public int PageSize { get; set; } = 3;

    public CategoryTransfer[] CategoryData { get; set; }
    public CategoryTransfer Edit { get; set; } = null;

    protected override async Task OnInitAsync()
    {
        CategoryData = await Http.GetJsonAsync<CategoryTransfer[]>("/api/Category/All");
    }

    protected void Filter_Change(UIChangeEventArgs e)
    {
        Filter = Convert.ToString(e.Value);
        CurrentPage = 1;
        Edit = null;
    }

    protected void Edit_Click(int categoryID)
    {
        var category = GetCategories().Single(c => c.CategoryID == categoryID);
        Edit = new CategoryTransfer { CategoryID = category.CategoryID, CategoryName = category.CategoryName, Description = category.Description };
    }

    protected async Task Save_Click()
    {
        await Http.PutJsonAsync(string.Format("/api/Category/Save/{0}", Edit.CategoryID),
            new { CategoryID = Edit.CategoryID, CategoryName = Edit.CategoryName, Description = Edit.Description });

        var category = GetCategories().Single(c => c.CategoryID == Edit.CategoryID);
        category.CategoryName = Edit.CategoryName;
        category.Description = Edit.Description;
        Edit = null;
        StateHasChanged();
    }

    protected void Cancel_Click()
    {
        Edit = null;
    }

    protected void Reset_Click()
    {
        Filter = "";
        CurrentPage = 1;
        Edit = null;
    }

    protected int GetPageCount()
    {
        var count = GetCategories()?.Count() ?? 0;
        var pageCount = (count - 1) / PageSize + 1;
        return pageCount;
    }

    protected IEnumerable<CategoryTransfer> GetCategories()
    {
        if (CategoryData == null) yield break;
        foreach (var cat in CategoryData)
        {
            if (!string.IsNullOrWhiteSpace(Filter)
                && cat.CategoryName.IndexOf(Filter.Trim(), StringComparison.InvariantCultureIgnoreCase) == -1
                && cat.Description.IndexOf(Filter.Trim(), StringComparison.InvariantCultureIgnoreCase) == -1) continue;
            yield return cat;
        }
    }
}
